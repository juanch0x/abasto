/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;
//import modelo.*;
//import control.*;
import java.awt.Color;
import java.awt.Component;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author hiory
 */
public class Vencimientos extends javax.swing.JInternalFrame {

    /**
     * Creates new form Vencimientos
     */
    public Vencimientos() {
        initComponents();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);

        jTable1.setModel(buscarlotes());
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

public DefaultTableModel buscarlotes() {
        
        String encabezados[]= {"Nombre","Codigo","Lote","Vencimiento","Dias Restantes"};
        Control.ControlLote c = new Control.ControlLote();
        List<Modelo.Lotes> lotes = null;
        
        try {
            lotes = c.buscarlote();
             
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AgregarStock.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       Long resta;//para saber cuanto queda de vencimiento
       java.util.Date fechaActual = new Date();   
       
        String [][] data = new String[lotes.size()][5];
        for (int i = 0; i < lotes.size(); i++) {
        
            resta=lotes.get(i).getVencimiento().getTime()-fechaActual.getTime();
            long dias = (resta / (1000 * 60 * 60 * 24))+1;
            
            
            data[i][0] = lotes.get(i).getNombre();
            data[i][1] = Long.toString(lotes.get(i).getCodigo());
            data[i][2] = lotes.get(i).getLote();
            data[i][3] = lotes.get(i).getVencimiento().toString();
            data[i][4] = Long.toString(dias);
            

        }
        
        return new DefaultTableModel(data,encabezados);
    }

public class FormatoTablaUsuarios extends DefaultTableCellRenderer
{
 public Component getTableCellRendererComponent
 (JTable table, Object value, boolean selected, boolean focused, int row, int column)
 {
         // SI EN CADA FILA DE LA TABLA LA CELDA 5 ES IGUAL A ACTIVO COLOR AZUL
  if(String.valueOf(jTable1.getValueAt(row,4)).equals("10"))  setForeground(Color.blue);
                  // SI NO ES ACTIVO ENTONCES COLOR ROJO
  else  setForeground(Color.red);
    
 super.getTableCellRendererComponent(table, value, selected, focused, row, column);
 return this;
 }
 }

}
